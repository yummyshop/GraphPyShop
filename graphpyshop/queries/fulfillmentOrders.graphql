query fulfillmentOrders($fulfillmentOrdersForMerge_first: Int = 250, $fulfillmentOrdersForMerge_after: String, $fulfillmentOrdersForMerge_last: Int, $fulfillmentOrdersForMerge_before: String, $fulfillmentOrdersForMerge_reverse: Boolean = false, $fulfillments_first: Int = 250, $fulfillments_after: String, $fulfillments_last: Int, $fulfillments_before: String, $fulfillments_reverse: Boolean = false, $lineItems_first: Int = 250, $lineItems_after: String, $lineItems_last: Int, $lineItems_before: String, $lineItems_reverse: Boolean = false, $locationsForMove_lineItemIds: [ID!] = [], $locationsForMove_query: String, $locationsForMove_locationIds: [ID!], $locationsForMove_first: Int = 250, $locationsForMove_after: String, $locationsForMove_last: Int, $locationsForMove_before: String, $locationsForMove_reverse: Boolean = false, $merchantRequests_kind: FulfillmentOrderMerchantRequestKind, $merchantRequests_first: Int = 250, $merchantRequests_after: String, $merchantRequests_last: Int, $merchantRequests_before: String, $merchantRequests_reverse: Boolean = false, $fulfillmentOrders_includeClosed: Boolean = false, $fulfillmentOrders_first: Int = 250, $fulfillmentOrders_after: String, $fulfillmentOrders_last: Int, $fulfillmentOrders_before: String, $fulfillmentOrders_reverse: Boolean = false, $fulfillmentOrders_sortKey: FulfillmentOrderSortKeys = ID, $fulfillmentOrders_query: String) {
  fulfillmentOrders(
    includeClosed: $fulfillmentOrders_includeClosed
    first: $fulfillmentOrders_first
    after: $fulfillmentOrders_after
    last: $fulfillmentOrders_last
    before: $fulfillmentOrders_before
    reverse: $fulfillmentOrders_reverse
    sortKey: $fulfillmentOrders_sortKey
    query: $fulfillmentOrders_query
  ) {
    edges {
      cursor
      node {
        assignedLocation {
          address1
          address2
          city
          countryCode
          name
          phone
          province
          zip
        }
        channelId
        createdAt
        deliveryMethod {
          id
          maxDeliveryDateTime
          methodType
          minDeliveryDateTime
          serviceCode
          sourceReference
        }
        destination {
          address1
          address2
          city
          company
          countryCode
          email
          firstName
          id
          lastName
          phone
          province
          zip
        }
        fulfillAt
        fulfillBy
        fulfillmentHolds {
          heldBy
          reason
          reasonNotes
          releaseWarning
        }
        fulfillmentOrdersForMerge(
          first: $fulfillmentOrdersForMerge_first
          after: $fulfillmentOrdersForMerge_after
          last: $fulfillmentOrdersForMerge_last
          before: $fulfillmentOrdersForMerge_before
          reverse: $fulfillmentOrdersForMerge_reverse
        ) {
          edges {
            cursor
            node {
              channelId
              id
              orderId
            }
          }
          pageInfo {
            endCursor
            hasNextPage
            hasPreviousPage
            startCursor
          }
        }
        fulfillments(
          first: $fulfillments_first
          after: $fulfillments_after
          last: $fulfillments_last
          before: $fulfillments_before
          reverse: $fulfillments_reverse
        ) {
          edges {
            cursor
            node {
              createdAt
              deliveredAt
              displayStatus
              estimatedDeliveryAt
              id
              inTransitAt
              legacyResourceId
              name
              requiresShipping
              status
              totalQuantity
              updatedAt
            }
          }
          pageInfo {
            endCursor
            hasNextPage
            hasPreviousPage
            startCursor
          }
        }
        id
        internationalDuties {
          incoterm
        }
        lineItems(
          first: $lineItems_first
          after: $lineItems_after
          last: $lineItems_last
          before: $lineItems_before
          reverse: $lineItems_reverse
        ) {
          edges {
            cursor
            node {
              id
              inventoryItemId
              productTitle
              remainingQuantity
              requiresShipping
              sku
              totalQuantity
              variantTitle
              vendor
            }
          }
          pageInfo {
            endCursor
            hasNextPage
            hasPreviousPage
            startCursor
          }
        }
        locationsForMove(
          lineItemIds: $locationsForMove_lineItemIds
          query: $locationsForMove_query
          locationIds: $locationsForMove_locationIds
          first: $locationsForMove_first
          after: $locationsForMove_after
          last: $locationsForMove_last
          before: $locationsForMove_before
          reverse: $locationsForMove_reverse
        ) {
          edges {
            cursor
            node {
              message
              movable
            }
          }
          pageInfo {
            endCursor
            hasNextPage
            hasPreviousPage
            startCursor
          }
        }
        merchantRequests(
          kind: $merchantRequests_kind
          first: $merchantRequests_first
          after: $merchantRequests_after
          last: $merchantRequests_last
          before: $merchantRequests_before
          reverse: $merchantRequests_reverse
        ) {
          edges {
            cursor
            node {
              id
              kind
              message
              requestOptions
              responseData
              sentAt
            }
          }
          pageInfo {
            endCursor
            hasNextPage
            hasPreviousPage
            startCursor
          }
        }
        order {
          id
        }
        orderId
        orderName
        orderProcessedAt
        requestStatus
        status
        supportedActions {
          action
          externalUrl
        }
        updatedAt
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
  }
}