query translatableResources($nestedTranslatableResources_resourceType: TranslatableResourceType, $nestedTranslatableResources_first: Int = 250, $nestedTranslatableResources_after: String, $nestedTranslatableResources_last: Int, $nestedTranslatableResources_before: String, $nestedTranslatableResources_reverse: Boolean = false, $translations_locale: String!, $translations_outdated: Boolean, $translations_marketId: ID, $translatableResources_resourceType: TranslatableResourceType!, $translatableResources_first: Int = 250, $translatableResources_after: String, $translatableResources_last: Int, $translatableResources_before: String, $translatableResources_reverse: Boolean = false) {
  translatableResources(
    resourceType: $translatableResources_resourceType
    first: $translatableResources_first
    after: $translatableResources_after
    last: $translatableResources_last
    before: $translatableResources_before
    reverse: $translatableResources_reverse
  ) {
    edges {
      cursor
      node {
        nestedTranslatableResources(
          resourceType: $nestedTranslatableResources_resourceType
          first: $nestedTranslatableResources_first
          after: $nestedTranslatableResources_after
          last: $nestedTranslatableResources_last
          before: $nestedTranslatableResources_before
          reverse: $nestedTranslatableResources_reverse
        ) {
          edges {
            cursor
            node {
              resourceId
            }
          }
          pageInfo {
            endCursor
            hasNextPage
            hasPreviousPage
            startCursor
          }
        }
        resourceId
        translatableContent {
          digest
          key
          locale
          type
          value
        }
        translations(
          locale: $translations_locale
          outdated: $translations_outdated
          marketId: $translations_marketId
        ) {
          key
          locale
          outdated
          updatedAt
          value
        }
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
  }
}