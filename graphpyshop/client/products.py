# Generated by ariadne-codegen
# Source: ./graphpyshop/queries

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import CountPrecision, CurrencyCode, ProductStatus


class Products(BaseModel):
    products: "ProductsProducts"


class ProductsProducts(BaseModel):
    edges: List["ProductsProductsEdges"]


class ProductsProductsEdges(BaseModel):
    node: "ProductsProductsEdgesNode"


class ProductsProductsEdgesNode(BaseModel):
    id: str
    available_publications_count: Optional[
        "ProductsProductsEdgesNodeAvailablePublicationsCount"
    ] = Field(alias="availablePublicationsCount")
    category: Optional["ProductsProductsEdgesNodeCategory"]
    compare_at_price_range: Optional[
        "ProductsProductsEdgesNodeCompareAtPriceRange"
    ] = Field(alias="compareAtPriceRange")
    created_at: Any = Field(alias="createdAt")
    default_cursor: str = Field(alias="defaultCursor")
    description: str
    description_html: Any = Field(alias="descriptionHtml")
    featured_image: Optional["ProductsProductsEdgesNodeFeaturedImage"] = Field(
        alias="featuredImage"
    )
    feedback: Optional["ProductsProductsEdgesNodeFeedback"]
    gift_card_template_suffix: Optional[str] = Field(alias="giftCardTemplateSuffix")
    handle: str
    has_only_default_variant: bool = Field(alias="hasOnlyDefaultVariant")
    has_out_of_stock_variants: bool = Field(alias="hasOutOfStockVariants")
    has_variants_that_requires_components: bool = Field(
        alias="hasVariantsThatRequiresComponents"
    )
    id: str
    is_gift_card: bool = Field(alias="isGiftCard")
    legacy_resource_id: Any = Field(alias="legacyResourceId")
    online_store_preview_url: Optional[Any] = Field(alias="onlineStorePreviewUrl")
    online_store_url: Optional[Any] = Field(alias="onlineStoreUrl")
    options: List["ProductsProductsEdgesNodeOptions"]
    price_range_v_2: "ProductsProductsEdgesNodePriceRangeV2" = Field(
        alias="priceRangeV2"
    )
    product_type: str = Field(alias="productType")
    published_at: Optional[Any] = Field(alias="publishedAt")
    requires_selling_plan: bool = Field(alias="requiresSellingPlan")
    selling_plan_groups_count: Optional[
        "ProductsProductsEdgesNodeSellingPlanGroupsCount"
    ] = Field(alias="sellingPlanGroupsCount")
    seo: "ProductsProductsEdgesNodeSeo"
    status: ProductStatus
    tags: List[str]
    template_suffix: Optional[str] = Field(alias="templateSuffix")
    title: str
    total_inventory: int = Field(alias="totalInventory")
    tracks_inventory: bool = Field(alias="tracksInventory")
    updated_at: Any = Field(alias="updatedAt")
    variants_count: Optional["ProductsProductsEdgesNodeVariantsCount"] = Field(
        alias="variantsCount"
    )
    vendor: str


class ProductsProductsEdgesNodeAvailablePublicationsCount(BaseModel):
    count: int
    precision: CountPrecision


class ProductsProductsEdgesNodeCategory(BaseModel):
    id: str
    ancestor_ids: List[str] = Field(alias="ancestorIds")
    children_ids: List[str] = Field(alias="childrenIds")
    full_name: str = Field(alias="fullName")
    is_archived: bool = Field(alias="isArchived")
    is_leaf: bool = Field(alias="isLeaf")
    is_root: bool = Field(alias="isRoot")
    level: int
    name: str
    parent_id: Optional[str] = Field(alias="parentId")


class ProductsProductsEdgesNodeCompareAtPriceRange(BaseModel):
    min_variant_compare_at_price: "ProductsProductsEdgesNodeCompareAtPriceRangeMinVariantCompareAtPrice" = Field(
        alias="minVariantCompareAtPrice"
    )


class ProductsProductsEdgesNodeCompareAtPriceRangeMinVariantCompareAtPrice(BaseModel):
    amount: Any
    currency_code: CurrencyCode = Field(alias="currencyCode")


class ProductsProductsEdgesNodeFeaturedImage(BaseModel):
    url: Any
    width: Optional[int]
    height: Optional[int]


class ProductsProductsEdgesNodeFeedback(BaseModel):
    summary: str


class ProductsProductsEdgesNodeOptions(BaseModel):
    id: str
    name: str
    option_values: List["ProductsProductsEdgesNodeOptionsOptionValues"] = Field(
        alias="optionValues"
    )
    position: int
    values: List[str]


class ProductsProductsEdgesNodeOptionsOptionValues(BaseModel):
    has_variants: bool = Field(alias="hasVariants")
    id: str
    linked_metafield_value: Optional[str] = Field(alias="linkedMetafieldValue")
    name: str


class ProductsProductsEdgesNodePriceRangeV2(BaseModel):
    min_variant_price: "ProductsProductsEdgesNodePriceRangeV2MinVariantPrice" = Field(
        alias="minVariantPrice"
    )


class ProductsProductsEdgesNodePriceRangeV2MinVariantPrice(BaseModel):
    amount: Any
    currency_code: CurrencyCode = Field(alias="currencyCode")


class ProductsProductsEdgesNodeSellingPlanGroupsCount(BaseModel):
    count: int
    precision: CountPrecision


class ProductsProductsEdgesNodeSeo(BaseModel):
    description: Optional[str]
    title: Optional[str]


class ProductsProductsEdgesNodeVariantsCount(BaseModel):
    count: int
    precision: CountPrecision


Products.model_rebuild()
ProductsProducts.model_rebuild()
ProductsProductsEdges.model_rebuild()
ProductsProductsEdgesNode.model_rebuild()
ProductsProductsEdgesNodeCompareAtPriceRange.model_rebuild()
ProductsProductsEdgesNodeOptions.model_rebuild()
ProductsProductsEdgesNodePriceRangeV2.model_rebuild()
