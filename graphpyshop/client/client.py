# Generated by ariadne-codegen
# Source: ./graphpyshop/queries

from typing import Any, AsyncGenerator, Dict, List, Optional, Union

from .base_model import UNSET, UnsetType
from .bulk_operation import (
    BulkOperation,
    BulkOperationNodeBulkOperation,
    BulkOperationNodeNode,
)
from .bulk_operation_cancel import (
    BulkOperationCancel,
    BulkOperationCancelBulkOperationCancel,
)
from .bulk_operation_run_mutation import (
    BulkOperationRunMutation,
    BulkOperationRunMutationBulkOperationRunMutation,
)
from .bulk_operation_run_query import (
    BulkOperationRunQuery,
    BulkOperationRunQueryBulkOperationRunQuery,
)
from .collections import (
    Collections,
    CollectionsCollections,
    CollectionsCollectionsEdgesNode,
)
from .current_bulk_operation import (
    CurrentBulkOperation,
    CurrentBulkOperationCurrentBulkOperation,
)
from .customers import Customers, CustomersCustomers, CustomersCustomersEdgesNode
from .enums import BulkOperationStatus, BulkOperationType, WebhookSubscriptionTopic
from .input_types import WebhookSubscriptionInput
from .operations import (
    BULK_OPERATION_CANCEL_GQL,
    BULK_OPERATION_GQL,
    BULK_OPERATION_RUN_MUTATION_GQL,
    BULK_OPERATION_RUN_QUERY_GQL,
    COLLECTIONS_GQL,
    CURRENT_BULK_OPERATION_GQL,
    CUSTOMERS_GQL,
    ORDERS_GQL,
    PRODUCT_VARIANTS_GQL,
    PRODUCTS_GQL,
    SUBSCRIPTION_BILLING_CYCLES_GQL,
    SUBSCRIPTION_CONTRACTS_GQL,
    WEBHOOK_SUBSCRIPTION_CREATE_GQL,
    WEBHOOK_SUBSCRIPTION_DELETE_GQL,
    WEBHOOK_SUBSCRIPTION_UPDATE_GQL,
    WEBHOOK_SUBSCRIPTIONS_GQL,
)
from .orders import Orders, OrdersOrders, OrdersOrdersEdgesNode
from .product_variants import (
    ProductVariants,
    ProductVariantsProductVariants,
    ProductVariantsProductVariantsEdgesNode,
)
from .products import Products, ProductsProducts, ProductsProductsEdgesNode
from .shopify_async_base_client import ShopifyAsyncBaseClient
from .subscription_billing_cycles import (
    SubscriptionBillingCycles,
    SubscriptionBillingCyclesSubscriptionBillingCycles,
    SubscriptionBillingCyclesSubscriptionBillingCyclesEdgesNode,
)
from .subscription_contracts import (
    SubscriptionContracts,
    SubscriptionContractsSubscriptionContracts,
    SubscriptionContractsSubscriptionContractsEdgesNode,
)
from .webhook_subscription_create import (
    WebhookSubscriptionCreate,
    WebhookSubscriptionCreateWebhookSubscriptionCreate,
)
from .webhook_subscription_delete import (
    WebhookSubscriptionDelete,
    WebhookSubscriptionDeleteWebhookSubscriptionDelete,
)
from .webhook_subscription_update import (
    WebhookSubscriptionUpdate,
    WebhookSubscriptionUpdateWebhookSubscriptionUpdate,
)
from .webhook_subscriptions import (
    WebhookSubscriptions,
    WebhookSubscriptionsWebhookSubscriptions,
    WebhookSubscriptionsWebhookSubscriptionsEdgesNode,
)


def gql(q: str) -> str:
    return q


class ShopifyClient(ShopifyAsyncBaseClient):
    async def bulk_operation(
        self, id: str, **kwargs: Any
    ) -> Optional[Union[BulkOperationNodeNode, BulkOperationNodeBulkOperation]]:
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=BULK_OPERATION_GQL,
            operation_name="bulkOperation",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return BulkOperation.model_validate(data).node

    async def bulk_operation_cancel(
        self, id: str, **kwargs: Any
    ) -> Optional[BulkOperationCancelBulkOperationCancel]:
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=BULK_OPERATION_CANCEL_GQL,
            operation_name="bulkOperationCancel",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return BulkOperationCancel.model_validate(data).bulk_operation_cancel

    async def bulk_operation_run_mutation(
        self, mutation: str, staged_upload_path: str, **kwargs: Any
    ) -> Optional[BulkOperationRunMutationBulkOperationRunMutation]:
        variables: Dict[str, object] = {
            "mutation": mutation,
            "stagedUploadPath": staged_upload_path,
        }
        response = await self.execute(
            query=BULK_OPERATION_RUN_MUTATION_GQL,
            operation_name="bulkOperationRunMutation",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return BulkOperationRunMutation.model_validate(data).bulk_operation_run_mutation

    async def bulk_operation_run_query(
        self, query: str, **kwargs: Any
    ) -> Optional[BulkOperationRunQueryBulkOperationRunQuery]:
        variables: Dict[str, object] = {"query": query}
        response = await self.execute(
            query=BULK_OPERATION_RUN_QUERY_GQL,
            operation_name="bulkOperationRunQuery",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return BulkOperationRunQuery.model_validate(data).bulk_operation_run_query

    async def collections(
        self, first: int, query: str, **kwargs: Any
    ) -> CollectionsCollections:
        variables: Dict[str, object] = {"first": first, "query": query}
        response = await self.execute(
            query=COLLECTIONS_GQL,
            operation_name="collections",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return Collections.model_validate(data).collections

    async def current_bulk_operation(
        self, type: Union[Optional[BulkOperationType], UnsetType] = UNSET, **kwargs: Any
    ) -> Optional[CurrentBulkOperationCurrentBulkOperation]:
        variables: Dict[str, object] = {"type": type}
        response = await self.execute(
            query=CURRENT_BULK_OPERATION_GQL,
            operation_name="CurrentBulkOperation",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CurrentBulkOperation.model_validate(data).current_bulk_operation

    async def customers(
        self, first: int, query: str, **kwargs: Any
    ) -> CustomersCustomers:
        variables: Dict[str, object] = {"first": first, "query": query}
        response = await self.execute(
            query=CUSTOMERS_GQL,
            operation_name="customers",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return Customers.model_validate(data).customers

    async def orders(self, first: int, query: str, **kwargs: Any) -> OrdersOrders:
        variables: Dict[str, object] = {"first": first, "query": query}
        response = await self.execute(
            query=ORDERS_GQL, operation_name="orders", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Orders.model_validate(data).orders

    async def product_variants(
        self, first: int, query: str, **kwargs: Any
    ) -> ProductVariantsProductVariants:
        variables: Dict[str, object] = {"first": first, "query": query}
        response = await self.execute(
            query=PRODUCT_VARIANTS_GQL,
            operation_name="productVariants",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return ProductVariants.model_validate(data).product_variants

    async def products(self, first: int, query: str, **kwargs: Any) -> ProductsProducts:
        variables: Dict[str, object] = {"first": first, "query": query}
        response = await self.execute(
            query=PRODUCTS_GQL, operation_name="products", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Products.model_validate(data).products

    async def subscription_billing_cycles(
        self,
        first: int,
        reverse: bool,
        contract_id: str,
        start_date: Any,
        end_date: Any,
        **kwargs: Any
    ) -> SubscriptionBillingCyclesSubscriptionBillingCycles:
        variables: Dict[str, object] = {
            "first": first,
            "reverse": reverse,
            "contractId": contract_id,
            "startDate": start_date,
            "endDate": end_date,
        }
        response = await self.execute(
            query=SUBSCRIPTION_BILLING_CYCLES_GQL,
            operation_name="subscriptionBillingCycles",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return SubscriptionBillingCycles.model_validate(
            data
        ).subscription_billing_cycles

    async def subscription_contracts(
        self, query: str, **kwargs: Any
    ) -> SubscriptionContractsSubscriptionContracts:
        variables: Dict[str, object] = {"query": query}
        response = await self.execute(
            query=SUBSCRIPTION_CONTRACTS_GQL,
            operation_name="subscriptionContracts",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return SubscriptionContracts.model_validate(data).subscription_contracts

    async def webhook_subscription_create(
        self,
        topic: WebhookSubscriptionTopic,
        webhook_subscription: WebhookSubscriptionInput,
        **kwargs: Any
    ) -> Optional[WebhookSubscriptionCreateWebhookSubscriptionCreate]:
        variables: Dict[str, object] = {
            "topic": topic,
            "webhookSubscription": webhook_subscription,
        }
        response = await self.execute(
            query=WEBHOOK_SUBSCRIPTION_CREATE_GQL,
            operation_name="webhookSubscriptionCreate",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return WebhookSubscriptionCreate.model_validate(
            data
        ).webhook_subscription_create

    async def webhook_subscription_delete(
        self, id: str, **kwargs: Any
    ) -> Optional[WebhookSubscriptionDeleteWebhookSubscriptionDelete]:
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=WEBHOOK_SUBSCRIPTION_DELETE_GQL,
            operation_name="webhookSubscriptionDelete",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return WebhookSubscriptionDelete.model_validate(
            data
        ).webhook_subscription_delete

    async def webhook_subscription_update(
        self, id: str, webhook_subscription: WebhookSubscriptionInput, **kwargs: Any
    ) -> Optional[WebhookSubscriptionUpdateWebhookSubscriptionUpdate]:
        variables: Dict[str, object] = {
            "id": id,
            "webhookSubscription": webhook_subscription,
        }
        response = await self.execute(
            query=WEBHOOK_SUBSCRIPTION_UPDATE_GQL,
            operation_name="webhookSubscriptionUpdate",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return WebhookSubscriptionUpdate.model_validate(
            data
        ).webhook_subscription_update

    async def webhook_subscriptions(
        self,
        first: int,
        callback_url: Any,
        topics: Union[Optional[List[WebhookSubscriptionTopic]], UnsetType] = UNSET,
        **kwargs: Any
    ) -> WebhookSubscriptionsWebhookSubscriptions:
        variables: Dict[str, object] = {
            "first": first,
            "topics": topics,
            "callbackUrl": callback_url,
        }
        response = await self.execute(
            query=WEBHOOK_SUBSCRIPTIONS_GQL,
            operation_name="webhookSubscriptions",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return WebhookSubscriptions.model_validate(data).webhook_subscriptions

    async def bq_collections(
        self, first: int, query: str, **kwargs: Any
    ) -> AsyncGenerator[CollectionsCollectionsEdgesNode, None]:
        variables: Dict[str, Any] = {"first": first, "query": query}
        async for item in self.run_bulk_operation(
            self.bulk_operation_run_query,
            self.bulk_operation,
            COLLECTIONS_GQL,
            variables,
            BulkOperationStatus,
            BulkOperationNodeBulkOperation,
            CollectionsCollectionsEdgesNode,
        ):
            yield item

    async def bq_customers(
        self, first: int, query: str, **kwargs: Any
    ) -> AsyncGenerator[CustomersCustomersEdgesNode, None]:
        variables: Dict[str, Any] = {"first": first, "query": query}
        async for item in self.run_bulk_operation(
            self.bulk_operation_run_query,
            self.bulk_operation,
            CUSTOMERS_GQL,
            variables,
            BulkOperationStatus,
            BulkOperationNodeBulkOperation,
            CustomersCustomersEdgesNode,
        ):
            yield item

    async def bq_orders(
        self, first: int, query: str, **kwargs: Any
    ) -> AsyncGenerator[OrdersOrdersEdgesNode, None]:
        variables: Dict[str, Any] = {"first": first, "query": query}
        async for item in self.run_bulk_operation(
            self.bulk_operation_run_query,
            self.bulk_operation,
            ORDERS_GQL,
            variables,
            BulkOperationStatus,
            BulkOperationNodeBulkOperation,
            OrdersOrdersEdgesNode,
        ):
            yield item

    async def bq_product_variants(
        self, first: int, query: str, **kwargs: Any
    ) -> AsyncGenerator[ProductVariantsProductVariantsEdgesNode, None]:
        variables: Dict[str, Any] = {"first": first, "query": query}
        async for item in self.run_bulk_operation(
            self.bulk_operation_run_query,
            self.bulk_operation,
            PRODUCT_VARIANTS_GQL,
            variables,
            BulkOperationStatus,
            BulkOperationNodeBulkOperation,
            ProductVariantsProductVariantsEdgesNode,
        ):
            yield item

    async def bq_products(
        self, first: int, query: str, **kwargs: Any
    ) -> AsyncGenerator[ProductsProductsEdgesNode, None]:
        variables: Dict[str, Any] = {"first": first, "query": query}
        async for item in self.run_bulk_operation(
            self.bulk_operation_run_query,
            self.bulk_operation,
            PRODUCTS_GQL,
            variables,
            BulkOperationStatus,
            BulkOperationNodeBulkOperation,
            ProductsProductsEdgesNode,
        ):
            yield item

    async def bq_subscription_billing_cycles(
        self,
        first: int,
        reverse: bool,
        contract_id: str,
        start_date: Any,
        end_date: Any,
        **kwargs: Any
    ) -> AsyncGenerator[
        SubscriptionBillingCyclesSubscriptionBillingCyclesEdgesNode, None
    ]:
        variables: Dict[str, Any] = {
            "first": first,
            "reverse": reverse,
            "contract_id": contract_id,
            "start_date": start_date,
            "end_date": end_date,
        }
        async for item in self.run_bulk_operation(
            self.bulk_operation_run_query,
            self.bulk_operation,
            SUBSCRIPTION_BILLING_CYCLES_GQL,
            variables,
            BulkOperationStatus,
            BulkOperationNodeBulkOperation,
            SubscriptionBillingCyclesSubscriptionBillingCyclesEdgesNode,
        ):
            yield item

    async def bq_subscription_contracts(
        self, query: str, **kwargs: Any
    ) -> AsyncGenerator[SubscriptionContractsSubscriptionContractsEdgesNode, None]:
        variables: Dict[str, Any] = {"query": query}
        async for item in self.run_bulk_operation(
            self.bulk_operation_run_query,
            self.bulk_operation,
            SUBSCRIPTION_CONTRACTS_GQL,
            variables,
            BulkOperationStatus,
            BulkOperationNodeBulkOperation,
            SubscriptionContractsSubscriptionContractsEdgesNode,
        ):
            yield item

    async def bq_webhook_subscriptions(
        self,
        first: int,
        callback_url: Any,
        topics: Union[Optional[List[WebhookSubscriptionTopic]], UnsetType] = UNSET,
        **kwargs: Any
    ) -> AsyncGenerator[WebhookSubscriptionsWebhookSubscriptionsEdgesNode, None]:
        variables: Dict[str, Any] = {
            "first": first,
            "callback_url": callback_url,
            "topics": topics,
        }
        async for item in self.run_bulk_operation(
            self.bulk_operation_run_query,
            self.bulk_operation,
            WEBHOOK_SUBSCRIPTIONS_GQL,
            variables,
            BulkOperationStatus,
            BulkOperationNodeBulkOperation,
            WebhookSubscriptionsWebhookSubscriptionsEdgesNode,
        ):
            yield item

    async def bq_collections(
        self, first: int, query: str, **kwargs: Any
    ) -> AsyncGenerator[CollectionsCollectionsEdgesNode, None]:
        variables: Dict[str, Any] = {"first": first, "query": query}
        async for item in self.run_bulk_operation(
            self.bulk_operation_run_query,
            self.bulk_operation,
            COLLECTIONS_GQL,
            variables,
            BulkOperationStatus,
            BulkOperationNodeBulkOperation,
            CollectionsCollectionsEdgesNode,
        ):
            yield item

    async def bq_customers(
        self, first: int, query: str, **kwargs: Any
    ) -> AsyncGenerator[CustomersCustomersEdgesNode, None]:
        variables: Dict[str, Any] = {"first": first, "query": query}
        async for item in self.run_bulk_operation(
            self.bulk_operation_run_query,
            self.bulk_operation,
            CUSTOMERS_GQL,
            variables,
            BulkOperationStatus,
            BulkOperationNodeBulkOperation,
            CustomersCustomersEdgesNode,
        ):
            yield item

    async def bq_orders(
        self, first: int, query: str, **kwargs: Any
    ) -> AsyncGenerator[OrdersOrdersEdgesNode, None]:
        variables: Dict[str, Any] = {"first": first, "query": query}
        async for item in self.run_bulk_operation(
            self.bulk_operation_run_query,
            self.bulk_operation,
            ORDERS_GQL,
            variables,
            BulkOperationStatus,
            BulkOperationNodeBulkOperation,
            OrdersOrdersEdgesNode,
        ):
            yield item

    async def bq_product_variants(
        self, first: int, query: str, **kwargs: Any
    ) -> AsyncGenerator[ProductVariantsProductVariantsEdgesNode, None]:
        variables: Dict[str, Any] = {"first": first, "query": query}
        async for item in self.run_bulk_operation(
            self.bulk_operation_run_query,
            self.bulk_operation,
            PRODUCT_VARIANTS_GQL,
            variables,
            BulkOperationStatus,
            BulkOperationNodeBulkOperation,
            ProductVariantsProductVariantsEdgesNode,
        ):
            yield item

    async def bq_products(
        self, first: int, query: str, **kwargs: Any
    ) -> AsyncGenerator[ProductsProductsEdgesNode, None]:
        variables: Dict[str, Any] = {"first": first, "query": query}
        async for item in self.run_bulk_operation(
            self.bulk_operation_run_query,
            self.bulk_operation,
            PRODUCTS_GQL,
            variables,
            BulkOperationStatus,
            BulkOperationNodeBulkOperation,
            ProductsProductsEdgesNode,
        ):
            yield item

    async def bq_subscription_billing_cycles(
        self,
        first: int,
        reverse: bool,
        contract_id: str,
        start_date: Any,
        end_date: Any,
        **kwargs: Any
    ) -> AsyncGenerator[
        SubscriptionBillingCyclesSubscriptionBillingCyclesEdgesNode, None
    ]:
        variables: Dict[str, Any] = {
            "first": first,
            "reverse": reverse,
            "contract_id": contract_id,
            "start_date": start_date,
            "end_date": end_date,
        }
        async for item in self.run_bulk_operation(
            self.bulk_operation_run_query,
            self.bulk_operation,
            SUBSCRIPTION_BILLING_CYCLES_GQL,
            variables,
            BulkOperationStatus,
            BulkOperationNodeBulkOperation,
            SubscriptionBillingCyclesSubscriptionBillingCyclesEdgesNode,
        ):
            yield item

    async def bq_subscription_contracts(
        self, query: str, **kwargs: Any
    ) -> AsyncGenerator[SubscriptionContractsSubscriptionContractsEdgesNode, None]:
        variables: Dict[str, Any] = {"query": query}
        async for item in self.run_bulk_operation(
            self.bulk_operation_run_query,
            self.bulk_operation,
            SUBSCRIPTION_CONTRACTS_GQL,
            variables,
            BulkOperationStatus,
            BulkOperationNodeBulkOperation,
            SubscriptionContractsSubscriptionContractsEdgesNode,
        ):
            yield item

    async def bq_webhook_subscriptions(
        self,
        first: int,
        callback_url: Any,
        topics: Union[Optional[List[WebhookSubscriptionTopic]], UnsetType] = UNSET,
        **kwargs: Any
    ) -> AsyncGenerator[WebhookSubscriptionsWebhookSubscriptionsEdgesNode, None]:
        variables: Dict[str, Any] = {
            "first": first,
            "callback_url": callback_url,
            "topics": topics,
        }
        async for item in self.run_bulk_operation(
            self.bulk_operation_run_query,
            self.bulk_operation,
            WEBHOOK_SUBSCRIPTIONS_GQL,
            variables,
            BulkOperationStatus,
            BulkOperationNodeBulkOperation,
            WebhookSubscriptionsWebhookSubscriptionsEdgesNode,
        ):
            yield item
