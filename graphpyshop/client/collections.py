# Generated by ariadne-codegen
# Source: ./graphpyshop/queries

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    CollectionRuleColumn,
    CollectionRuleRelation,
    CollectionSortOrder,
    CountPrecision,
)


class Collections(BaseModel):
    collections: "CollectionsCollections"


class CollectionsCollections(BaseModel):
    edges: List["CollectionsCollectionsEdges"]


class CollectionsCollectionsEdges(BaseModel):
    node: "CollectionsCollectionsEdgesNode"


class CollectionsCollectionsEdgesNode(BaseModel):
    id: str
    description: str
    available_publications_count: Optional[
        "CollectionsCollectionsEdgesNodeAvailablePublicationsCount"
    ] = Field(alias="availablePublicationsCount")
    description_html: Any = Field(alias="descriptionHtml")
    feedback: Optional["CollectionsCollectionsEdgesNodeFeedback"]
    handle: str
    image: Optional["CollectionsCollectionsEdgesNodeImage"]
    published_on_current_publication: bool = Field(
        alias="publishedOnCurrentPublication"
    )
    resource_publications_count: Optional[
        "CollectionsCollectionsEdgesNodeResourcePublicationsCount"
    ] = Field(alias="resourcePublicationsCount")
    rule_set: Optional["CollectionsCollectionsEdgesNodeRuleSet"] = Field(
        alias="ruleSet"
    )
    seo: "CollectionsCollectionsEdgesNodeSeo"
    sort_order: CollectionSortOrder = Field(alias="sortOrder")
    template_suffix: Optional[str] = Field(alias="templateSuffix")
    title: str
    updated_at: Any = Field(alias="updatedAt")


class CollectionsCollectionsEdgesNodeAvailablePublicationsCount(BaseModel):
    count: int
    precision: CountPrecision


class CollectionsCollectionsEdgesNodeFeedback(BaseModel):
    summary: str


class CollectionsCollectionsEdgesNodeImage(BaseModel):
    id: Optional[str]
    alt_text: Optional[str] = Field(alias="altText")
    height: Optional[int]
    url: Any
    width: Optional[int]


class CollectionsCollectionsEdgesNodeResourcePublicationsCount(BaseModel):
    count: int
    precision: CountPrecision


class CollectionsCollectionsEdgesNodeRuleSet(BaseModel):
    applied_disjunctively: bool = Field(alias="appliedDisjunctively")
    rules: List["CollectionsCollectionsEdgesNodeRuleSetRules"]


class CollectionsCollectionsEdgesNodeRuleSetRules(BaseModel):
    column: CollectionRuleColumn
    condition: str
    relation: CollectionRuleRelation


class CollectionsCollectionsEdgesNodeSeo(BaseModel):
    description: Optional[str]
    title: Optional[str]


Collections.model_rebuild()
CollectionsCollections.model_rebuild()
CollectionsCollectionsEdges.model_rebuild()
CollectionsCollectionsEdgesNode.model_rebuild()
CollectionsCollectionsEdgesNodeRuleSet.model_rebuild()
